{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "description": "Element specification",
    "properties": {
        "source": {
            "type": "string",
            "description": "The source of the change (e.g., from which client). This is optional."
        },
        "elements": {
            "type": "array",
            "description": "An array of elements",
            "items": {
                "type": "object",
                "$ref": "#/definitions/Element"
            }
        },
        "message": {
                    "type": "string",
                    "description": "The response message for this transaction if it is non-empty."
        }
    },

    "definitions": {
        "Element": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "[xmi:id] Unique identifier of the element. Equivalent to MDID unless element is a slot. If a slot, id is constructed using the pattern [instanceSpecId]-slot-[definingFeatureId]."
                },
                "name": {
                    "type": "string",
                    "description": "[UML:name for named element] Name of the element"
                },
                "documentation": {
                    "type": "string",
                    "description": "[MD:documentation] Documentation of the element"
                },
                "_editable": {
                    "type": "boolean",
                    "description": "[MMS specific] Indicates whether user has permissions to edit the element (so GUI can toggle, server still checks on save though) (Read-Only)"
                },
                "ownerId": {
                    "type": "string",
                    "description": "[UML:owner] Owner of the element - this indicates containment"
                },
                "_creator": {
                    "type": "string",
                    "description": "[MMS specific] Creator of the element (Read-Only)"
                },
                "_created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "[MMS specific] Creation time of the element on server (Read-Only)"
                },
                "_modifier": {
                    "type": "string",
                    "description": "[MMS specific] Last modifier of the element (Read-Only)"
                },
                "_modified": {
                    "type": "string",
                    "format": "date-time",
                    "description": "[MMS specific] Last modified time of the element (Read-Only)"
                },
                "_projectId": {
                    "type": "string",
                    "description": "[MMS specific] ProjectId of the element (Read-Only)"
                },
                "_refId": {
                    "type": "string",
                    "description": "[MMS specific] RefId of the element (Read-Only)"
                },
               "_commitId": {
                    "type": "string",
                    "description": "[MMS specific] CommitId of the element (Read-Only)"
                },
                "_qualifiedName": {
                    "type": "string",
                    "description": "[Derived property] Containment hierarchy of element based off of SysML names, currently provided as a convenience for context if extended query param is true (Read-Only)"
                },
                "_qualifiedId": {
                    "type": "string",
                    "description": "[Derived property] Containment hierarchy of element based off of SysML ids, provided for systems that can't find by unique id if extended query param is true (Read-Only)"
                },
                "type": {
                    "type": "string",
                    "description": "The metatype of the element."
                },
                "_relatedDocuments": {
                    "type": "array",
                    "description": "[MMS specific] Array of documents that the element appears in. Typically only returned as part of search results. (Read Only)",
                    "items": {
		                "type": "object",
		                "$ref": "#/definitions/RelatedDocument"
	                }
	            },
                "specification": {
                        "type": "object",
                        "description": "The embedded specification.  Only exists if type is constraint or instanceSpecification",
                        "oneOf": [
                            { "$ref": "#/definitions/Duration"},
                            { "$ref": "#/definitions/DurationInterval"},
                            { "$ref": "#/definitions/ElementValue"},
                            { "$ref": "#/definitions/Expression"},
                            { "$ref": "#/definitions/OpaqueExpression"},
                            { "$ref": "#/definitions/InstanceValue"},
                            { "$ref": "#/definitions/Interval"},
                            { "$ref": "#/definitions/StringExpression"},
                            { "$ref": "#/definitions/LiteralBoolean"},
                            { "$ref": "#/definitions/LiteralNull"},
                            { "$ref": "#/definitions/LiteralInteger"},
                            { "$ref": "#/definitions/LiteralReal"},
                            { "$ref": "#/definitions/LiteralString"},
                            { "$ref": "#/definitions/LiteralUnlimitedNatural"},
                            { "$ref": "#/definitions/TimeExpression"},
                            { "$ref": "#/definitions/TimeInterval"}
                        ]
                },
                "classifierIds": {
                    "description": "Only appears if the type is instanceSpecification.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "The classifiers IDs"
                    }
                },
                "slotIds": {
                    "description": "Only appears if the type is instanceSpecification.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "IDs of the slots"
                    }
                },
                "value": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "description": "[UML] The value of the property if the type is slot.",
                        "oneOf": [
                            { "$ref": "#/definitions/Duration"},
                            { "$ref": "#/definitions/DurationInterval"},
                            { "$ref": "#/definitions/ElementValue"},
                            { "$ref": "#/definitions/Expression"},
                            { "$ref": "#/definitions/OpaqueExpression"},
                            { "$ref": "#/definitions/InstanceValue"},
                            { "$ref": "#/definitions/Interval"},
                            { "$ref": "#/definitions/StringExpression"},
                            { "$ref": "#/definitions/LiteralBoolean"},
                            { "$ref": "#/definitions/LiteralNull"},
                            { "$ref": "#/definitions/LiteralInteger"},
                            { "$ref": "#/definitions/LiteralReal"},
                            { "$ref": "#/definitions/LiteralString"},
                            { "$ref": "#/definitions/LiteralUnlimitedNatural"},
                            { "$ref": "#/definitions/TimeExpression"},
                            { "$ref": "#/definitions/TimeInterval"}
                        ]
                    }
                },
                "typeId": {
                    "type": "string",
                    "description": "[UML::Property.dataType] ID for typed elements"
                },
                "defaultValue": {
                        "type": "object",
                        "description": "The embedded specification.  Only exists if type is property",
                        "oneOf": [
                            { "$ref": "#/definitions/Duration"},
                            { "$ref": "#/definitions/DurationInterval"},
                            { "$ref": "#/definitions/ElementValue"},
                            { "$ref": "#/definitions/Expression"},
                            { "$ref": "#/definitions/OpaqueExpression"},
                            { "$ref": "#/definitions/InstanceValue"},
                            { "$ref": "#/definitions/Interval"},
                            { "$ref": "#/definitions/StringExpression"},
                            { "$ref": "#/definitions/LiteralBoolean"},
                            { "$ref": "#/definitions/LiteralNull"},
                            { "$ref": "#/definitions/LiteralInteger"},
                            { "$ref": "#/definitions/LiteralReal"},
                            { "$ref": "#/definitions/LiteralString"},
                            { "$ref": "#/definitions/LiteralUnlimitedNatural"},
                            { "$ref": "#/definitions/TimeExpression"},
                            { "$ref": "#/definitions/TimeInterval"}
                        ]
                },
                "_propertyPathIds": {
                    "type": "array",
                    "description": "only exists for elements of type Connector",
                    "items": {
                        "type": "array",
                        "description": "first array is property path of endA, second array is property path of endB",
                        "items": {
                            "type": "string",
                            "description": "ids of the properties in the path"
                        }
                    }
                }
	        }
        },
        "Duration": {
            "description": "[UML::Duration]",
            "properties": {
                "type": { "enum": ["Duration"] }
            }
        },
        "DurationInterval": {
            "description": "[UML::DurationInterval]",
            "properties": {
                "type": { "enum": ["DurationInterval"] },
                "durationMax": {
                    "type": "string",
                    "description": "ID of the SysML element representing the duration max"
                },
                "durationMin": {
                    "type": "string",
                    "description": "ID of the SysML element representing the duration min"
                }
            }
        },
        "ElementValue": {
            "description": "[UML::ElementValue]",
            "properties": {
                "type": { "enum": ["ElementValue"] },
                "elementId": {
                    "type": "string",
                    "description": "ID of the element that stores this element value"
                }
            }
        },
        "Expression": {
            "description": "[UML::Expression]",
            "properties": {
                "type": { "enum": ["Expression"] },
                "operand": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "description": "The value specs",
                        "oneOf": [
                            { "$ref": "#/definitions/Duration"},
                            { "$ref": "#/definitions/DurationInterval"},
                            { "$ref": "#/definitions/ElementValue"},
                            { "$ref": "#/definitions/Expression"},
                            { "$ref": "#/definitions/OpaqueExpression"},
                            { "$ref": "#/definitions/InstanceValue"},
                            { "$ref": "#/definitions/Interval"},
                            { "$ref": "#/definitions/StringExpression"},
                            { "$ref": "#/definitions/LiteralBoolean"},
                            { "$ref": "#/definitions/LiteralNull"},
                            { "$ref": "#/definitions/LiteralInteger"},
                            { "$ref": "#/definitions/LiteralReal"},
                            { "$ref": "#/definitions/LiteralString"},
                            { "$ref": "#/definitions/LiteralUnlimitedNatural"},
                            { "$ref": "#/definitions/TimeExpression"},
                            { "$ref": "#/definitions/TimeInterval"}
                        ]
                    }
                }
            }
        },
        "OpaqueExpression": {
            "description": "[UML::OpaqueExpression]",
            "properties": {
                "type": { "enum": ["OpaqueExpression"] },
                "body": {
                    "type": "string",
                    "description": "The opaque expression string"
                }
            }
        },
        "InstanceValue": {
            "description": "[UML::InstanceValue]",
            "properties": {
                "type": { "enum": ["InstanceValue"] },
                "instanceId": {
                    "type": "string",
                    "description": "ID of the SysML element representing the instance"
                }
            }
        },
        "Interval": {
            "description": "[UML::Interval]",
            "properties": {
                "type": { "enum": ["Interval"] }
            }
        },
        "StringExpression": {
            "description": "[UML::StringExpression]",
            "properties": {
                "type": { "enum ": ["StringExpression"] }
            }
        },
        "LiteralBoolean": {
            "description": "[UML::LiteralBoolean]",
            "properties": {
                "type": { "enum": ["LiteralBoolean"] },
                "value": {
                    "type": "boolean"
                }
            }
        },
        "LiteralNull": {
            "description": "[UML::LiterallNull]",
            "properties": {
                "type": { "enum": ["LiteralNull"] }
            }
        },
        "LiteralInteger": {
            "description": "[UML::LiteralInteger]",
            "properties": {
                "type": { "enum": ["LiteralInteger"] },
                "value": {
                    "type": "integer"
                }
            }
        },
        "LiteralReal": {
            "description": "[UML::LiteralReal]",
            "properties": {
                "type": { "enum": ["LiteralReal"] },
                "value": {
                    "type": "number"
                }
            }
        },
        "LiteralString": {
            "description": "[UML::LiteralString]",
            "properties": {
                "type": { "enum": ["LiteralString"] },
                "value": {
                    "type": "string"
                }
            }
        },
        "LiteralUnlimitedNatural": {
            "description": "[UML::LiteralUnlimitedNatural]",
            "properties": {
                "type": { "enum": ["LiteralUnlimitedNatural"] },
                "value": {
                    "type": "integer"
                }
            }
        },
        "TimeExpression": {
            "description": "[UML::TimeExpression]",
            "properties": {
                "type": { "enum": ["TimeExpression"] }
            }
        },
        "TimeInterval": {
            "description": "[UML::TimeInterval]",
            "properties": {
                "type": { "enum": ["TimeInterval"] }
            }
        },
        "Association": {
            "description": "[UML::Association]",
            "properties": {
                "type": { "enum": ["Association"] },
                "ownedEnd": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "description": "IDs of the Nodes"
                    }
                },
                "sourceAggregation": {
                    "type": "string",
                    "description": "can be COMPOSITE, SHARED, NONE"
                },
                "targetAggregation": {
                    "type": "string",
                    "description": "can be COMPOSITE, SHARED, NONE"
                }
            }
        },
        "RelatedDocument": {
            "description": "Object to hold the document that element might be referenced from",
            "properties": {
                "id": { "type": "string" },
                "_parentViews": {
                    "type": "array",
                    "description": "Array of the direct parent views the element appears in, object only contains id",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/Element"
                    }
                }
            }
        }
    }
}
