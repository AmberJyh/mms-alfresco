#%RAML 0.8
---
# NOTE: to import into SOAPUI, change all the schema references to '|' since it
#       can't find them and to remove the examples since it can't parse them
title: mms
version: v1.0
mediaType: application/json
baseUri: https://{server}/alfresco/service
protocols: [HTTPS]
documentation:
  - title: Home
    content: |
      Welcome to the _Model Management System (MMS) API_ Documentation. The _MMS API_
      allows you to connect your application to our RESTful service for accessing
      systems engineering model information.

securitySchemes:
  - basic:
      type: Basic Authentication

schemas:
  # these all return elements - search may need to be paged
  - elements: !include elements.json-schema
  - orgs:    !include orgs.json-schema
  - projects: !include projects.json-schema
  - refs:  !include refs.json-schema

  - connections: !include connections.json-schema

  # include post/ put and delete responses
  #- elementsResponse: !include postResponse.json-schema
  #- viewsResponse: !include postResponse.json-schema
traits:
  - qualifiable:
      description: Aspect for resources that can be that can exclude the qualified names/ids
      queryParameters:
        extended:
          description: If false, doesn't display qualified names
          type: boolean
          required: false
  - recursable:
      description: Aspect for resources that can be retrieved recursively
      queryParameters:
        recurse:
          description: If true, finds all elements recursively based on containment hierarchy.
                       This overrides depth so it is -1 regardless if depth is specified.
          type: boolean
          required: false
        depth:
          description: Recurse depth. -1 specifies infinite recursion (e.g., until all leaf
                       nodes are found). 0 is the same as specifying no depth. 1 finds
                       everything 1 level deep, so on and so forth.
          type: integer
          required: false
  - commitable:
      description: Aspect for resources that can be queried via a commit
      queryParameters:
        commitId:
          description: Commit to find most recent version of <<resourcePathName>>.
          type: string
          required: false

resourceTypes:
  - readCollection:
      securedBy: [basic]
      usage: Resources with read capabilities and standard responses
      description: Read operations for <<resourcePathName>>
      get:
          is: [recursable, qualifiable, commitable]
          description: Read operation for <<resourcePathName>>
          responses:
              200:
                description: <<resourcePathName>> read successful
                body:
                  application/json:
                    schema: <<resourcePathName>>
              400:
                description: Malformed request by client
              401:
                description: User does not have read permissions to <<resourcePathName>>
              404:
                description: <<resourcePathName>> not found
              500:
                description: Could not read <<resourcePathName>> due to internal server error
  - collection:
      type: readCollection
      usage: Resources with CRUD capabilities
      description: Create, Read, Update, and Delete operations for <<resourcePathName>>
      post:
        description: Append operation for <<resourcePathName>>
        body:
          application/json:
            schema: <<resourcePathName>>
        responses:
          200:
            body:
              application/json:
                schema: <<resourcePathName>>
            description: <<resourcePathName>> append successful
          202:
            description: <<resourcePathName>> append started, but not yet completed
          401:
            description: User does not have write permissions to <<resourcePathName>>
          404:
            description: <<resourcePathName>> not found
          409:
            description: <<resourcePathName>> conflict detected (e.g., intervening update
                         occurred between when user accessed resource and when user saved
                         resource)
          500:
            description: Could not append to <<resourcePathName>> due to internal server error
#      put:
#        description: Create/update operation for <<resourcePathName>>
#        body:
#          schema: <<resourcePathName>>
#        responses:
#          200:
#            description: <<resourcePathName>> update successful
#            body:
#              schema: <<resourcePathName>>PutResponse
#          201:
#            description: <<resourcePathName>> create successful
#          202:
#            description: <<resourcePathName>> create/update started, but not yet completed
#          401:
#            description: User does not have create/update permissions to <<resourcePathName>>
#          404:
#            description: <<resourcePathName>> not found
#          409:
#            description: <<resourcePathName>> conflict detected (e.g., intervening update
#                         occurred between when user accessed resource and when user updated
#                         resource)
#          500:
#            description: Could not append to <<resourcePathName>> due to internal server error
      delete:
        description: Delete operation for <<resourcePathName>>
        responses:
          200:
            description: <<resourcePathName>> delete successful
            body:
              application/json:
                schema:  <<resourcePathName>>
          202:
            description: <<resourcePathName>> delete started, but not yet completed
          401:
            description: User does not have delete permissions to <<resourcePathName>>
          404:
            description: <<resourcePathName>> not found
          500:
            description: Could not delete <<resourcePathName>> due to internal server error
  - connection:
      get:
        description: Get configuration for <<resourcePathName>>
        responses:
          200:
            body:
              application/json:
                schema: connections
      post:
        description: Configure <<resourcePathName>>
        body:
          application/json:
            schema: connections
        responses:
          200:
/orgs:
  description: All projects are contained in a org
  get:
      description: Get all the orgs
  post:
      description: Post a org using the query parameters and supplied json
      body:
        application/json:
          schema: orgs
  /{orgId}:
    uriParameters:
      orgId:
        description: Org ID under consideration.
    get:
      description: Get the specified org
  /projects:
    description: All projects
    get:
      description: Get all the projects in the specified org
    post:
      description: Post a proeject using the query parameters and supplied json
      body:
        application/json:
          schema: projects
    /{projectId}:
      uriParameters:
        projectId:
          description: Project ID under consideration.
      get:
        description: Get the specified project
/projects:
  description: All projects
  get:
    description: Get all the projects in the specified org
  post:
    description: Post a proeject using the query parameters and supplied json
    body:
      application/json:
        schema: projects
  /{projectId}:
    uriParameters:
      projectId:
        description: Project ID under consideration.
    get:
      description: Get the specified project
    /ref:
      description: All resources are "namespaced" by the ref (aka branch).  The ref is also used for tagging.
      get:
        description: Get the specified project
      post:
        description: Post a org using the query parameters and supplied json
        body:
          application/json:
            schema: ref
      /{refId}:
        uriParameters:
          refId:
            description: Ref ID under consideration.
        get:
          description: Get the specified ref.
        delete:
          description: Delete the specified ref.
        /search:
          description: searches for elements in any project mounted to the current project.
        /artifacts:
          description: path to images
          /{elementId}:
            uriParameters:
              elementId:
                description: Element ID under consideration.
            get:
              description: Get the documents of the specified ref.
              queryParameters:
                accept:
                  description: image/svg
                  required: false

        /history:
          description: get the commit history of the specififed ref.
          get:
            description: Get the hisotry of the specified ref.
        /groups:
          description: a grouping of elements
          get:
            description: Get all groups of elements in a ref.
        /mounts:
          description: All mounts associated with a project.
          get:
            description: Get all mounts in a project.
        /documents:
          description: get documents
          get:
            description: Get the documents of the specified ref.
            queryParameters:
              groupId:
                description: Get documents by group.  If groupId isn't specified returns only root level docs.
                required: false
        /elements:
          description: Get elements
          post:
            description: Post elements using the supplied json
            body:
              application/json:
                schema: elements
              #is[recursable, qualifiable]

          delete:
            description: Delete elements using the supplied json
            body:
              application/json:
                schema: elements
          put:
            description: Bulk get elements, give id of elements to get
            body:
              application/json:
                schema: elements
          /{elementId}:
            uriParameters:
              elementId:
                description: element ID under consideration.
            get:
              description: Get specified element.
              queryParameters:
                commitId:
                  description: Get commit for speificed element by id.
                  required: false
            delete:
              description: Delete specified element
              body:
                application/json:
                  schema: elements

            /history:
              get:
                description: get the element in question's history.
            /{id}:
                uriParameters:
                  id:
                    description: ID under consideration. For images.
                post:
                  description: set image content type to image/svg
                  body:
                    application/json:
                      schema: elements

/connection/jms:
  type: connection
/connection/jmswl:
  type: connection
/connection/rest:
  type: connection
